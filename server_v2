"""
Серверное приложение для соединений
"""
import asyncio
from asyncio import transports


class ClientProtocol(asyncio.Protocol):
    login: str
    server: 'Server'
    transport: transports.Transport

    def __init__(self, server: 'Server'):
        self.server = server
        self.login = None

    def data_received(self, data: bytes):
        decoded = data.decode()
        print(decoded)

        if self.login is None:
            # login:User
            if decoded.startswith("login:"):
                login = decoded.replace("login:", "").replace("\r\n", "")
                if self.server.check_login(login):
                    self.login = login
                    self.transport.write(
                        f"Привет, {self.login}!".encode()
                    )
                    # Отправка 10 последних сообщений
                    self.send_history()
                else:
                    self.transport.write(
                        f"Логин {login} занят, попробуйте другой".encode()
                    )
        else:
            self.send_message(decoded)


    def send_history(self):
        for message in self.server.message_stack:
            if message != "none":
                encoded = message.encode()
                self.transport.write(encoded)

    def send_message(self, message):
        format_string = f"<{self.login}> {message}"
        encoded = format_string.encode()
        self.server.stack_update(format_string) # Добавление сообщения в стек

        # Пользователь должен "зайти" в чат, чтобы не только посылать, но и принимать сообщения
        for client in self.server.clients:
            if client.login != self.login and client.login != None: # Добавлена проверка, есть ли у пользователя логин
                client.transport.write(encoded) 


    def connection_made(self, transport: transports.Transport):
        self.transport = transport
        self.server.clients.append(self)
        print("Соединение установлено")

    def connection_lost(self, exception):
        self.server.clients.remove(self)
        print("Соединение разорвано")


class Server:
    clients: list
    message_stack: list 
    # Стек последних 10 сообщений
    # Для хранения всех сообщений чата можно использовать список, без удаления первого элемента
    # Но для решения поставленной задачи хранение всех сообщений будет только занимать лишнюю память

    def __init__(self):
        self.clients = []
        self.message_stack = ["none","none","none","none","none","none","none","none","none","none"]

    def stack_update(self,message): # Реализация функционала стека FIFO сделанного из списка
        self.message_stack.append(message)
        self.message_stack.pop(0)

    def check_login (self,login): # Проверка является ли желаемый логин уже использующимся
        avalable = True
        for client in self.clients:
            if client.login is login:
                avalable = False
        return avalable

    def create_protocol(self):
        return ClientProtocol(self)

    async def start(self):
        loop = asyncio.get_running_loop()

        coroutine = await loop.create_server(
            self.create_protocol,
            "127.0.0.1",
            8888
        )

        print("Сервер запущен ...")

        await coroutine.serve_forever()


process = Server()
try:
    asyncio.run(process.start())
except KeyboardInterrupt:
    print("Сервер остановлен вручную")
